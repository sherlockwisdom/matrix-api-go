User Management
==============

The ShortMesh API provides endpoints for user registration and authentication. This guide covers how to create new users and authenticate existing users.

User Registration
-----------------

**Endpoint**: ``POST /``

**Headers**:
- ``Content-Type: application/json``

**Request Body**:
.. code-block:: json

   {
     "username": "john_doe",
     "password": "securepassword123"
   }

**Response**:
.. code-block:: json

   {
     "username": "john_doe",
     "access_token": "syt_YWxwaGE...",
     "status": "created"
   }

User Login
----------

**Endpoint**: ``POST /login``

**Headers**:
- ``Content-Type: application/json``

**Request Body**:
.. code-block:: json

   {
     "username": "john_doe",
     "password": "securepassword123"
   }

**Response**:
.. code-block:: json

   {
     "username": "john_doe",
     "access_token": "syt_YWxwaGE...",
     "status": "logged in"
   }

Code Examples
-------------

.. tabs::

   .. tab:: Python

      .. code-block:: python

         import requests
         import json
         import os
         from dotenv import load_dotenv

         # Load environment variables
         load_dotenv()

         # Configuration
         API_BASE_URL = os.getenv('SHORTMESH_API_URL', 'https://api.shortmesh.com')
         USERNAME = os.getenv('SHORTMESH_USERNAME', 'john_doe')
         PASSWORD = os.getenv('SHORTMESH_PASSWORD', 'securepassword123')

         def register_user(username, password):
             """Register a new user"""
             url = f"{API_BASE_URL}/"
             payload = {
                 "username": username,
                 "password": password
             }
             headers = {"Content-Type": "application/json"}
             
             try:
                 response = requests.post(url, headers=headers, json=payload)
                 
                 if response.status_code == 201:
                     result = response.json()
                     print("✅ User registered successfully!")
                     print(f"Username: {result['username']}")
                     print(f"Access Token: {result['access_token']}")
                     print(f"Status: {result['status']}")
                     return result['access_token']
                 else:
                     print(f"❌ Registration failed: {response.status_code}")
                     print(response.json())
                     return None
             except Exception as e:
                 print(f"❌ Registration error: {e}")
                 return None

         def login_user(username, password):
             """Login an existing user"""
             url = f"{API_BASE_URL}/login"
             payload = {
                 "username": username,
                 "password": password
             }
             headers = {"Content-Type": "application/json"}
             
             try:
                 response = requests.post(url, headers=headers, json=payload)
                 
                 if response.status_code == 200:
                     result = response.json()
                     print("✅ Login successful!")
                     print(f"Username: {result['username']}")
                     print(f"Access Token: {result['access_token']}")
                     print(f"Status: {result['status']}")
                     return result['access_token']
                 else:
                     print(f"❌ Login failed: {response.status_code}")
                     print(response.json())
                     return None
             except Exception as e:
                 print(f"❌ Login error: {e}")
                 return None

         if __name__ == "__main__":
             # Example: Register a new user
             print("=== User Registration ===")
             access_token = register_user(USERNAME, PASSWORD)
             
             if access_token:
                 # Example: Login with the same credentials
                 print("\n=== User Login ===")
                 login_user(USERNAME, PASSWORD)

   .. tab:: JavaScript (Node.js)

      .. code-block:: javascript

         require('dotenv').config();
         const axios = require('axios');

         // Configuration
         const API_BASE_URL = process.env.SHORTMESH_API_URL || 'https://api.shortmesh.com';
         const USERNAME = process.env.SHORTMESH_USERNAME || 'john_doe';
         const PASSWORD = process.env.SHORTMESH_PASSWORD || 'securepassword123';

         async function registerUser(username, password) {
             /** Register a new user */
             const url = `${API_BASE_URL}/`;
             const payload = {
                 username: username,
                 password: password
             };
             const headers = { 'Content-Type': 'application/json' };
             
             try {
                 const response = await axios.post(url, payload, { headers });
                 
                 console.log('✅ User registered successfully!');
                 console.log(`Username: ${response.data.username}`);
                 console.log(`Access Token: ${response.data.access_token}`);
                 console.log(`Status: ${response.data.status}`);
                 return response.data.access_token;
             } catch (error) {
                 console.error('❌ Registration failed:', error.response?.status);
                 if (error.response?.data) {
                     console.error(error.response.data);
                 }
                 return null;
             }
         }

         async function loginUser(username, password) {
             /** Login an existing user */
             const url = `${API_BASE_URL}/login`;
             const payload = {
                 username: username,
                 password: password
             };
             const headers = { 'Content-Type': 'application/json' };
             
             try {
                 const response = await axios.post(url, payload, { headers });
                 
                 console.log('✅ Login successful!');
                 console.log(`Username: ${response.data.username}`);
                 console.log(`Access Token: ${response.data.access_token}`);
                 console.log(`Status: ${response.data.status}`);
                 return response.data.access_token;
             } catch (error) {
                 console.error('❌ Login failed:', error.response?.status);
                 if (error.response?.data) {
                     console.error(error.response.data);
                 }
                 return null;
             }
         }

         // Example usage
         async function main() {
             // Example: Register a new user
             console.log('=== User Registration ===');
             const accessToken = await registerUser(USERNAME, PASSWORD);
             
             if (accessToken) {
                 // Example: Login with the same credentials
                 console.log('\n=== User Login ===');
                 await loginUser(USERNAME, PASSWORD);
             }
         }

         main();

   .. tab:: PHP

      .. code-block:: php

         <?php

         // Load environment variables (requires vlucas/phpdotenv package)
         $dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
         $dotenv->load();

         // Configuration
         $API_BASE_URL = $_ENV['SHORTMESH_API_URL'] ?? 'https://api.shortmesh.com';
         $USERNAME = $_ENV['SHORTMESH_USERNAME'] ?? 'john_doe';
         $PASSWORD = $_ENV['SHORTMESH_PASSWORD'] ?? 'securepassword123';

         function registerUser($apiBaseUrl, $username, $password) {
             /** Register a new user */
             $url = $apiBaseUrl . '/';
             $payload = [
                 'username' => $username,
                 'password' => $password
             ];
             $headers = ['Content-Type: application/json'];
             
             $ch = curl_init();
             curl_setopt($ch, CURLOPT_URL, $url);
             curl_setopt($ch, CURLOPT_POST, true);
             curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));
             curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
             curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
             curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
             
             $response = curl_exec($ch);
             $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
             curl_close($ch);
             
             if ($httpCode == 201) {
                 $result = json_decode($response, true);
                 echo "✅ User registered successfully!\n";
                 echo "Username: " . $result['username'] . "\n";
                 echo "Access Token: " . $result['access_token'] . "\n";
                 echo "Status: " . $result['status'] . "\n";
                 return $result['access_token'];
             } else {
                 echo "❌ Registration failed: " . $httpCode . "\n";
                 echo "Response: " . $response . "\n";
                 return null;
             }
         }

         function loginUser($apiBaseUrl, $username, $password) {
             /** Login an existing user */
             $url = $apiBaseUrl . '/login';
             $payload = [
                 'username' => $username,
                 'password' => $password
             ];
             $headers = ['Content-Type: application/json'];
             
             $ch = curl_init();
             curl_setopt($ch, CURLOPT_URL, $url);
             curl_setopt($ch, CURLOPT_POST, true);
             curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));
             curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
             curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
             curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
             
             $response = curl_exec($ch);
             $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
             curl_close($ch);
             
             if ($httpCode == 200) {
                 $result = json_decode($response, true);
                 echo "✅ Login successful!\n";
                 echo "Username: " . $result['username'] . "\n";
                 echo "Access Token: " . $result['access_token'] . "\n";
                 echo "Status: " . $result['status'] . "\n";
                 return $result['access_token'];
             } else {
                 echo "❌ Login failed: " . $httpCode . "\n";
                 echo "Response: " . $response . "\n";
                 return null;
             }
         }

         // Example usage
         echo "=== User Registration ===\n";
         $accessToken = registerUser($API_BASE_URL, $USERNAME, $PASSWORD);
         
         if ($accessToken) {
             echo "\n=== User Login ===\n";
             loginUser($API_BASE_URL, $USERNAME, $PASSWORD);
         }

         ?>

Error Handling
-------------

The user management endpoints return appropriate HTTP status codes:

- ``200 OK`` - Login successful
- ``201 Created`` - User registration successful
- ``400 Bad Request`` - Invalid request parameters
- ``401 Unauthorized`` - Login failed (invalid credentials)
- ``409 Conflict`` - User already exists (registration)
- ``500 Internal Server Error`` - Server error

Common error responses:

.. code-block:: json

   {
     "error": "Invalid request",
     "details": "Username must be 3-32 characters"
   }

.. code-block:: json

   {
     "error": "Login failed",
     "details": "Invalid credentials"
   }

.. code-block:: json

   {
     "error": "User creation failed",
     "details": "User already exists"
   }

Best Practices
-------------

1. **Secure Password Storage**: Never store passwords in plain text in your application
2. **Token Management**: Store access tokens securely and refresh them when needed
3. **Input Validation**: Validate usernames and passwords before sending requests
4. **Error Handling**: Always handle authentication errors gracefully
5. **Environment Variables**: Store sensitive configuration in environment variables

Username and Password Requirements
--------------------------------

- **Username**: 3-32 characters, letters, numbers, and underscores only
- **Password**: Minimum security requirements as defined by the server

Example Environment Setup
------------------------

.. code-block:: bash

   # .env file
   SHORTMESH_API_URL=https://api.shortmesh.com
   SHORTMESH_USERNAME=your_username
   SHORTMESH_PASSWORD=your_secure_password 